{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/prototype-polygon/src/App.js\";\nimport React, { Component } from \"react\"; // Mainnet\n\nimport IndexSwap from \"./abis/IndexSwap.json\";\nimport NFTSwap from \"./abis/NFTPortfolio.json\";\nimport IERC from \"./abis/IERC20.json\";\nimport pancakeSwapRouter from \"./abis/IPancakeRouter02.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Form, Input, Image, Message, Table } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport velvet from \"./velvet.png\";\nimport metamask from \"./metamask-fox.svg\";\nimport swal from 'sweetalert';\nimport ReactGA from 'react-ga';\nimport \"./App.css\";\n\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.connectWallet = async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n        console.log(\"Connected\");\n        this.setState({\n          connected: true\n        });\n      } else {\n        alert(\"Metamask not found\");\n      }\n\n      this.loadBlockchainData();\n      window.location.reload();\n    };\n\n    this.investNFTMainnet = async () => {\n      const web3 = new Web3(window.ethereum);\n      const v = this.state.nftToMintMainnet;\n      const valueInWei = web3.utils.toWei(v.toString(), 'ether');\n      console.log(this.state.SwapContract);\n      const resp = await this.state.NFTPortfolioContract.methods.investInFund(valueInWei).send({\n        from: this.state.account,\n        value: valueInWei\n      }).once(\"receipt\", receipt => {\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", \"You invested \".concat(v, \" BNB into the portfolio.\"), \"success\"); //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n    };\n\n    this.calcTokenBalanceMainnet = async (token, user) => {\n      const web3 = new Web3(window.ethereum);\n      const vault = \"0xD2aDa2CC6f97cfc1045B1cF70b3149139aC5f2a2\";\n      const indexShare = this.state.IndexSwap.methods.balanceOf(user).call();\n      const totalSupplyIndex = this.state.IndexSwap.totalSupply().call();\n      const TokenContract = new web3.eth.Contract(IERC.abi, token);\n      const tokenSupply = TokenContract.methods.balanceOf(vault).call();\n      let tokenShare = indexShare / totalSupplyIndex;\n      return tokenShare * tokenSupply;\n    };\n\n    this.approveNFTTokens = async () => {\n      const web3 = new Web3(window.ethereum);\n      const contractAddress = \"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\";\n      const vault = \"0x6056773C28c258425Cf9BC8Ba5f86B8031863164\";\n      const aXSTokenConntract = new web3.eth.Contract(IERC.abi, \"0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683\");\n      await aXSTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const mANATokenConntract = new web3.eth.Contract(IERC.abi, \"0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4\");\n      await mANATokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const sANDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7\");\n      await sANDTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n    };\n\n    this.approveDeFiTokens = async () => {\n      const web3 = new Web3(window.ethereum);\n      const contractAddress = \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\";\n      const vault = \"\";\n      const BTCTokenConntract = new web3.eth.Contract(IERC.abi, \"0x4b1851167f74FF108A994872A160f1D6772d474b\");\n      BTCTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const ETHTokenConntract = new web3.eth.Contract(IERC.abi, \"0x8BaBbB98678facC7342735486C851ABD7A0d17Ca\");\n      ETHTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const SHIBATokenConntract = new web3.eth.Contract(IERC.abi, \"0xBf0646Fa5ABbFf6Af50a9C40D5E621835219d384\");\n      SHIBATokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const XRPTokenConntract = new web3.eth.Contract(IERC.abi, \"0xCc00177908830cE1644AEB4aD507Fda3789128Af\");\n      XRPTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n      const LTCTokenConntract = new web3.eth.Contract(IERC.abi, \"0x2F9fd65E3BB89b68a8e2Abd68Db25F5C348F68Ee\");\n      LTCTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: vault\n      });\n    };\n\n    this.withdrawDeFiMainnet = async () => {\n      const web3 = new Web3(window.ethereum);\n      var withdrawAmt = this.state.withdrawValueDefi;\n      var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n      var sAmount = withdrawAmountInWei.toString();\n      const contractAddress = \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\";\n      await this.state.SwapContract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: this.state.account\n      });\n      await this.state.SwapContract.methods.withdrawFromFundNew(sAmount).send({\n        from: this.state.account,\n        value: 0\n      }).once(\"receipt\", receipt => {\n        swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.withdrawNFTMainnet = async () => {\n      const web3 = new Web3(window.ethereum);\n      var withdrawAmt = this.state.withdrawValueNFT;\n      var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n      var sAmount = withdrawAmountInWei.toString();\n      const contractAddress = \"\";\n      await this.state.NFTTokenContract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: this.state.account\n      });\n      await this.state.SwapContract.methods.withdrawFromFundNew(sAmount).send({\n        from: this.state.account,\n        value: 0\n      }).once(\"receipt\", receipt => {\n        swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.investNFT = async () => {\n      const web3 = new Web3(window.ethereum);\n      const v = this.state.defiToMint;\n      const valueInWei = web3.utils.toWei(v, 'ether');\n      const resp = await this.state.NFTPortfolioContract2.methods.investInFund(valueInWei).send({\n        from: this.state.account,\n        value: valueInWei\n      }).once(\"receipt\", receipt => {\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", \"You invested \".concat(v, \" BNB into the portfolio.\"), \"success\"); //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n\n      await this.calcTokenBalances();\n    };\n\n    this.calcTokenBalances = async () => {\n      const web3 = new Web3(window.ethereum);\n      let defiTokenBalanceInWei = await this.state.SwapContract2.methods.balanceOf(this.state.account).call();\n      let defiTokenBalance = web3.utils.fromWei(defiTokenBalanceInWei, \"ether\");\n      let nftTokenBalanceInWei = await this.state.SwapContract2.methods.balanceOf(this.state.account).call();\n      let nftTokenBalance = web3.utils.fromWei(nftTokenBalanceInWei, \"ether\");\n      this.setState({\n        defiTokenBalance,\n        nftTokenBalance\n      });\n    };\n\n    this.investDeFiMainnet = async () => {\n      const web3 = new Web3(window.ethereum);\n      const v = this.state.defiToMintMainnet;\n      const valueInWei = web3.utils.toWei(v, 'ether');\n      console.log(this.state.SwapContract);\n      const resp = await this.state.SwapContract.methods.investInFund(valueInWei).send({\n        from: this.state.account,\n        value: valueInWei\n      }).once(\"receipt\", receipt => {\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", \"You invested \".concat(v, \" BNB into the portfolio.\"), \"success\"); //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n    };\n\n    this.withdrawDeFi = async () => {\n      const web3 = new Web3(window.ethereum);\n      var withdrawAmt = this.state.withdrawValueDefi;\n      var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n      var sAmount = withdrawAmountInWei.toString();\n      await this.state.SwapContract2.methods.approve(\"0xd4Ac9a82f07e3d35511f890631a31977BE102593\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: this.state.account\n      });\n      await this.state.SwapContract2.methods.withdrawFromFundNew(sAmount).send({\n        from: this.state.account,\n        value: 0\n      }).once(\"receipt\", receipt => {\n        swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n      await this.calcTokenBalances();\n    };\n\n    this.withdrawNFT = async () => {\n      const web3 = new Web3(window.ethereum);\n      var withdrawAmt = this.state.withdrawValueNFT;\n      var withdrawAmountInWei = web3.utils.toWei(withdrawAmt.toString(), 'ether');\n      var sAmount = withdrawAmountInWei.toString();\n      console.log(this.state.NFTPortfolioContract2);\n      await this.state.NFTPortfolioContract2.methods.approve(\"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({\n        from: this.state.account\n      });\n      await this.state.NFTPortfolioContract2.methods.withdrawFromFundNew(sAmount).send({\n        from: this.state.account,\n        value: 0\n      }).once(\"receipt\", receipt => {\n        swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n        console.log(receipt);\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.getExchangeRate = async (amountIn, address) => {\n      const web3 = window.web3;\n      const pancakeRouter = new web3.eth.Contract(pancakeSwapRouter.abi, \"0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\");\n      var path = [];\n      path[0] = address;\n      path[1] = \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\";\n      const er = await pancakeRouter.methods.getAmountsOut(amountIn, path).call();\n      return er[1];\n    };\n\n    this.init = async () => {\n      await this.state.SwapContract2.methods.initializeDefult().send({\n        from: this.state.account\n      });\n      await this.state.SwapContract2.methods.updateRate(1, 1).send({\n        from: this.state.account\n      });\n    };\n\n    this.initMainnet = async () => {\n      await this.state.SwapContract.methods.initializeDefult().send({\n        from: this.state.account\n      });\n      await this.state.SwapContract.methods.updateRate(1, 1).send({\n        from: this.state.account\n      });\n    };\n\n    this.initnft = async () => {\n      await this.state.NFTPortfolioContract2.methods.initializeDefult().send({\n        from: this.state.account\n      });\n      await this.state.NFTPortfolioContract2.methods.updateRate(1, 1).send({\n        from: this.state.account\n      });\n    };\n\n    this.state = {\n      account: '',\n      SwapContract: null,\n      NFTTokenContract: null,\n      DeFiTokenContract: null,\n      NFTPortfolioContract: null,\n      SwapContract2: null,\n      NFTTokenContract2: null,\n      DeFiTokenContract2: null,\n      NFTPortfolioContract2: null,\n      address: \"\",\n      connected: false,\n      chainId: \"\",\n      defiToMintMainnet: 0,\n      nftToMintMainnet: 0,\n      withdrawValueDefi: 0,\n      withdrawValueNFT: 0,\n      nftTokenBalance: 0,\n      defiTokenBalance: 0,\n      rate: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData(); //await this.getRate();\n    //swal(\"The project is in the alpha stage, proceed at your own risk\");\n\n    const web3 = window.web3;\n    const chainIdDec = await web3.eth.getChainId();\n    this.setState({\n      chainId: chainIdDec\n    });\n\n    if (chainIdDec == \"97\") {\n      await this.calcTokenBalances();\n    }\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('MetaMask is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const chainIdDec = await web3.eth.getChainId();\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n\n    if (accounts[0]) {\n      this.setState({\n        connected: true\n      });\n    }\n\n    this.setState({\n      account: accounts[0]\n    });\n    const SwapContract = new web3.eth.Contract(IndexSwap.abi, \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\");\n    const NFTPortfolioContract = new web3.eth.Contract(NFTSwap.abi, \"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\");\n    this.setState({\n      SwapContract,\n      NFTPortfolioContract\n    });\n  }\n\n  render() {\n    window.addEventListener(\"load\", function () {\n      if (window.ethereum) {\n        // use MetaMask's provider\n        App.web3 = new Web3(window.ethereum);\n        window.ethereum.enable(); // get permission to access accounts\n        // detect Metamask account change\n\n        window.ethereum.on('accountsChanged', function (accounts) {\n          console.log('accountsChanges', accounts);\n        }); // detect Network account change\n\n        window.ethereum.on('networkChanged', function (networkId) {\n          console.log('networkChanged', networkId);\n        });\n      } else {\n        console.warn(\"No web3 detected. Falling back to http://127.0.0.1:8545. You should remove this fallback when you deploy live\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n        App.web3 = new Web3(new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\"));\n      }\n    });\n    const web3 = window.web3;\n    let button;\n\n    if (!this.state.connected) {\n      button = React.createElement(Button, {\n        style: {\n          position: \"absolute\",\n          top: \"60px\",\n          right: \"20px\"\n        },\n        onClick: this.connectWallet,\n        color: \"orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Image, {\n        style: {\n          \"padding-top\": \"7px\"\n        },\n        floated: \"left\",\n        size: \"mini\",\n        src: metamask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, \"Connect to MetaMask\"));\n    } else {\n      button = React.createElement(\"p\", {\n        style: {\n          position: \"absolute\",\n          top: \"110px\",\n          right: \"20px\",\n          color: \"#C0C0C0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, \"Account:\"), \" \", this.state.account);\n    }\n\n    let mainnet;\n    mainnet = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      divided: \"vertically\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 2,\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: \"#C0C0C0\",\n        \"font-weight\": \"bold\",\n        \"text-align\": \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }, \"APY: XX%\"), \"Top 5 Blue Chip DeFi Tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.investDeFiMainnet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"BNB amount to create\",\n      name: \"defiToMintMainnet\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\",\n        width: \"150px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457\n      },\n      __self: this\n    }, \"Create\")), React.createElement(Form, {\n      onSubmit: this.withdrawDeFiMainnet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"TOP15 amount to redeem\",\n      name: \"withdrawValueDefi\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      style: {\n        margin: \"20px\",\n        width: \"150px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, \"Redeem\"))))))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: \"#C0C0C0\",\n        \"font-weight\": \"bold\",\n        \"text-align\": \"right\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477\n      },\n      __self: this\n    }, \"APY: XX%\"), \"Top 3 NFT / Metaverse Tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.investNFTMainnet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"BNB amount to create\",\n      name: \"nftToMintMainnet\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\",\n        width: \"150px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \"Create\")), React.createElement(Form, {\n      onSubmit: this.withdrawNFTMainnet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"TOP15 amount to redeem\",\n      name: \"withdrawValueNFT\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      style: {\n        margin: \"20px\",\n        width: \"150px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"Redeem\"))))))))));\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503\n      },\n      __self: this\n    }, React.createElement(Message, {\n      negative: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, React.createElement(Message.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \"The project is in the alpha stage, proceed at your own risk.\"))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }), React.createElement(Image, {\n      src: velvet,\n      size: \"medium\",\n      verticalAlign: \"middle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }), button, mainnet, React.createElement(Button, {\n      onClick: this.approveNFTTokens,\n      color: \"green\",\n      style: {\n        margin: \"20px\",\n        width: \"150px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516\n      },\n      __self: this\n    }, \"approve nft\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/prototype-polygon/src/App.js"],"names":["React","Component","IndexSwap","NFTSwap","IERC","pancakeSwapRouter","detectEthereumProvider","Web3","Grid","Button","Card","Form","Input","Image","Message","Table","velvet","swal","ReactGA","axios","require","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","connectWallet","window","ethereum","web3","enable","console","log","connected","alert","loadBlockchainData","location","reload","investNFTMainnet","v","state","nftToMintMainnet","valueInWei","utils","toWei","toString","SwapContract","resp","NFTPortfolioContract","methods","investInFund","send","from","account","once","receipt","catch","err","status","calcTokenBalanceMainnet","token","user","vault","indexShare","balanceOf","call","totalSupplyIndex","totalSupply","TokenContract","eth","Contract","abi","tokenSupply","tokenShare","approveNFTTokens","contractAddress","aXSTokenConntract","approve","mANATokenConntract","sANDTokenConntract","approveDeFiTokens","BTCTokenConntract","ETHTokenConntract","SHIBATokenConntract","XRPTokenConntract","LTCTokenConntract","withdrawDeFiMainnet","withdrawAmt","withdrawValueDefi","withdrawAmountInWei","sAmount","withdrawFromFundNew","withdrawNFTMainnet","withdrawValueNFT","NFTTokenContract","investNFT","defiToMint","NFTPortfolioContract2","calcTokenBalances","defiTokenBalanceInWei","SwapContract2","defiTokenBalance","fromWei","nftTokenBalanceInWei","nftTokenBalance","investDeFiMainnet","defiToMintMainnet","withdrawDeFi","withdrawNFT","getExchangeRate","amountIn","address","pancakeRouter","path","er","getAmountsOut","init","initializeDefult","updateRate","initMainnet","initnft","DeFiTokenContract","NFTTokenContract2","DeFiTokenContract2","chainId","rate","componentDidMount","loadWeb3","chainIdDec","getChainId","provider","accounts","getAccounts","render","addEventListener","on","networkId","warn","providers","HttpProvider","button","position","top","right","metamask","color","mainnet","margin","width","background","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// Mainnet\nimport IndexSwap from \"./abis/IndexSwap.json\";\nimport NFTSwap from \"./abis/NFTPortfolio.json\";\n\nimport IERC from \"./abis/IERC20.json\";\nimport pancakeSwapRouter from \"./abis/IPancakeRouter02.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Form, Input, Image, Message, Table } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport velvet from \"./velvet.png\";\nimport metamask from \"./metamask-fox.svg\";\nimport swal from 'sweetalert';\nimport ReactGA from 'react-ga';\n\nimport \"./App.css\";\n\nconst axios = require('axios');\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n      account: '',\n      SwapContract: null,\n      NFTTokenContract: null,\n      DeFiTokenContract: null,\n      NFTPortfolioContract: null,\n\n      SwapContract2: null,\n      NFTTokenContract2: null,\n      DeFiTokenContract2: null,\n      NFTPortfolioContract2: null,\n\n      address: \"\",\n      connected: false,\n      \n      chainId: \"\",\n\n      defiToMintMainnet: 0,\n      nftToMintMainnet: 0,\n\n      withdrawValueDefi: 0,\n      withdrawValueNFT: 0,\n\n      nftTokenBalance: 0,\n      defiTokenBalance: 0,\n\n      rate: 0\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    //await this.getRate();\n    //swal(\"The project is in the alpha stage, proceed at your own risk\");\n\n    const web3 = window.web3;\n    const chainIdDec = await web3.eth.getChainId();\n\n    this.setState({chainId: chainIdDec})\n\n    if(chainIdDec == \"97\") {\n      await this.calcTokenBalances();\n    }  \n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('MetaMask is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const chainIdDec = await web3.eth.getChainId();\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({account: accounts[0]});\n    if(accounts[0]) {\n      this.setState({ connected: true })\n    }\n\n    this.setState({ account: accounts[0]}) \n    const SwapContract = new web3.eth.Contract(IndexSwap.abi, \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\");\n    const NFTPortfolioContract = new web3.eth.Contract(NFTSwap.abi, \"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\"); \n    this.setState({ SwapContract, NFTPortfolioContract});\n\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  connectWallet = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      console.log(\"Connected\");\n      this.setState({\n        connected: true\n      })\n\n    } else {\n      alert(\"Metamask not found\");\n    }\n\n    this.loadBlockchainData();\n    window.location.reload();\n  }\n\n  \n\n  investNFTMainnet = async () => {\n    const web3 = new Web3(window.ethereum);    \n    const v = this.state.nftToMintMainnet;\n    const valueInWei = web3.utils.toWei(v.toString(), 'ether');\n    \n    console.log(this.state.SwapContract);\n    const resp = await this.state.NFTPortfolioContract.methods.investInFund(valueInWei).send({ from: this.state.account, value: valueInWei })\n    .once(\"receipt\", (receipt) => {\n      console.log(receipt);\n\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", `You invested ${v} BNB into the portfolio.`, \"success\");\n        //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n  }\n\n  calcTokenBalanceMainnet = async(token, user) => {\n    const web3 = new Web3(window.ethereum);\n    const vault = \"0xD2aDa2CC6f97cfc1045B1cF70b3149139aC5f2a2\";\n\n    const indexShare = this.state.IndexSwap.methods.balanceOf(user).call();\n    const totalSupplyIndex = this.state.IndexSwap.totalSupply().call();\n\n    const TokenContract = new web3.eth.Contract(IERC.abi, token);\n    const tokenSupply = TokenContract.methods.balanceOf(vault).call();\n\n    let tokenShare = indexShare / totalSupplyIndex;\n    return tokenShare * tokenSupply;\n  }\n\n  approveNFTTokens = async() => {\n    const web3 = new Web3(window.ethereum);  \n    const contractAddress = \"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\";\n    const vault = \"0x6056773C28c258425Cf9BC8Ba5f86B8031863164\";\n\n    const aXSTokenConntract = new web3.eth.Contract(IERC.abi, \"0xBbba073C31bF03b8ACf7c28EF0738DeCF3695683\");\n    await aXSTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const mANATokenConntract = new web3.eth.Contract(IERC.abi, \"0xA1c57f48F0Deb89f569dFbE6E2B7f46D33606fD4\");\n    await mANATokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const sANDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x385Eeac5cB85A38A9a07A70c73e0a3271CfB54A7\");\n    await sANDTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n  }\n\n  approveDeFiTokens = async() => {\n    const web3 = new Web3(window.ethereum);  \n    const contractAddress = \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\";\n    const vault = \"\";\n\n    const BTCTokenConntract = new web3.eth.Contract(IERC.abi, \"0x4b1851167f74FF108A994872A160f1D6772d474b\");\n    BTCTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const ETHTokenConntract = new web3.eth.Contract(IERC.abi, \"0x8BaBbB98678facC7342735486C851ABD7A0d17Ca\");\n    ETHTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const SHIBATokenConntract = new web3.eth.Contract(IERC.abi, \"0xBf0646Fa5ABbFf6Af50a9C40D5E621835219d384\");\n    SHIBATokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const XRPTokenConntract = new web3.eth.Contract(IERC.abi, \"0xCc00177908830cE1644AEB4aD507Fda3789128Af\");\n    XRPTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n    const LTCTokenConntract = new web3.eth.Contract(IERC.abi, \"0x2F9fd65E3BB89b68a8e2Abd68Db25F5C348F68Ee\");\n    LTCTokenConntract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\").send({ from: vault });\n\n  }\n\n  withdrawDeFiMainnet = async () => {\n\n    const web3 = new Web3(window.ethereum);\n\n    var withdrawAmt = this.state.withdrawValueDefi;\n    var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n    var sAmount = withdrawAmountInWei.toString();\n    const contractAddress = \"0xd4Ac9a82f07e3d35511f890631a31977BE102593\";\n\n    await this.state.SwapContract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\")\n    .send({from: this.state.account});\n\n    await this.state.SwapContract.methods.withdrawFromFundNew(sAmount\n    ).send({\n      from: this.state.account, value: 0\n    }).once(\"receipt\", (receipt) => {\n      swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n      console.log(receipt);\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n  }\n\n  withdrawNFTMainnet = async () => {\n\n    const web3 = new Web3(window.ethereum);\n\n    var withdrawAmt = this.state.withdrawValueNFT;\n    var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n    var sAmount = withdrawAmountInWei.toString();\n    const contractAddress = \"\";\n\n    await this.state.NFTTokenContract.methods.approve(contractAddress, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\")\n    .send({from: this.state.account});\n\n    await this.state.SwapContract.methods.withdrawFromFundNew(sAmount\n    ).send({\n      from: this.state.account, value: 0\n    }).once(\"receipt\", (receipt) => {\n      swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n      console.log(receipt);\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n\n  // TESTNET\n\n  investNFT = async () => {\n\n    const web3 = new Web3(window.ethereum);    \n    const v = this.state.defiToMint;\n    const valueInWei = web3.utils.toWei(v, 'ether');\n    \n    const resp = await this.state.NFTPortfolioContract2.methods.investInFund(valueInWei).send({ from: this.state.account, value: valueInWei })\n    .once(\"receipt\", (receipt) => {\n      console.log(receipt);\n\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", `You invested ${v} BNB into the portfolio.`, \"success\");\n        //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n\n      await this.calcTokenBalances();\n\n  }\n\n  calcTokenBalances = async () => {\n    const web3 = new Web3(window.ethereum);\n    let defiTokenBalanceInWei = await this.state.SwapContract2.methods.balanceOf(this.state.account).call();\n    let defiTokenBalance = web3.utils.fromWei(defiTokenBalanceInWei, \"ether\");\n\n    let nftTokenBalanceInWei = await this.state.SwapContract2.methods.balanceOf(this.state.account).call();\n    let nftTokenBalance = web3.utils.fromWei(nftTokenBalanceInWei, \"ether\");\n\n    this.setState({ defiTokenBalance, nftTokenBalance });\n    \n  }\n\n  investDeFiMainnet = async () => {\n    const web3 = new Web3(window.ethereum);    \n    const v = this.state.defiToMintMainnet;\n    const valueInWei = web3.utils.toWei(v, 'ether');\n    \n    console.log(this.state.SwapContract);\n    const resp = await this.state.SwapContract.methods.investInFund(valueInWei).send({ from: this.state.account, value: valueInWei })\n    .once(\"receipt\", (receipt) => {\n      console.log(receipt);\n\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      if (resp.status) {\n        swal(\"Investment successfull!\", `You invested ${v} BNB into the portfolio.`, \"success\");\n        //window.location.reload();\n      } else {\n        swal(\"Investment failed!\");\n      }\n\n  }\n\n  withdrawDeFi = async () => {\n    const web3 = new Web3(window.ethereum);\n\n    var withdrawAmt = this.state.withdrawValueDefi;\n    var withdrawAmountInWei = web3.utils.toWei(withdrawAmt, 'ether');\n    var sAmount = withdrawAmountInWei.toString();\n\n    await this.state.SwapContract2.methods.approve(\"0xd4Ac9a82f07e3d35511f890631a31977BE102593\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\")\n    .send({from: this.state.account});\n\n    await this.state.SwapContract2.methods.withdrawFromFundNew(sAmount\n    ).send({\n      from: this.state.account, value: 0\n    }).once(\"receipt\", (receipt) => {\n      swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n      console.log(receipt);\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      await this.calcTokenBalances();\n\n  }\n  withdrawNFT = async () => {\n    const web3 = new Web3(window.ethereum);\n\n    var withdrawAmt = this.state.withdrawValueNFT;\n    var withdrawAmountInWei = web3.utils.toWei(withdrawAmt.toString(), 'ether');\n    var sAmount = withdrawAmountInWei.toString();\n\n    console.log(this.state.NFTPortfolioContract2);\n\n    await this.state.NFTPortfolioContract2.methods.approve(\"0x244295CbF9F8b5727FA7f61891DC9A06d828d6EE\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\")\n    .send({from: this.state.account});\n\n    await this.state.NFTPortfolioContract2.methods.withdrawFromFundNew(sAmount\n    ).send({\n      from: this.state.account, value: 0\n    }).once(\"receipt\", (receipt) => {\n      swal(\"Withdrawal successfull!\", \"The withdrawal was successful!\", \"success\");\n      console.log(receipt);\n    })\n      .catch((err) => {\n        console.log(err);\n      });\n\n  }\n\n  getExchangeRate = async (amountIn, address) => {\n    const web3 = window.web3;\n    const pancakeRouter = new web3.eth.Contract(pancakeSwapRouter.abi, \"0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\");\n\n    var path = [];\n    path[0] = address;\n    path[1] = \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\";\n\n    const er = await pancakeRouter.methods.getAmountsOut(amountIn, path).call();\n    return er[1];\n  }\n\n  init = async() => {\n    await this.state.SwapContract2.methods.initializeDefult().send({from: this.state.account});\n    await this.state.SwapContract2.methods.updateRate(1,1).send({from: this.state.account});\n  }\n\n  initMainnet = async() => {\n    await this.state.SwapContract.methods.initializeDefult().send({from: this.state.account});\n    await this.state.SwapContract.methods.updateRate(1,1).send({from: this.state.account});\n  }\n\n  initnft = async() => {\n    await this.state.NFTPortfolioContract2.methods.initializeDefult().send({from: this.state.account});\n    await this.state.NFTPortfolioContract2.methods.updateRate(1,1).send({from: this.state.account});\n  }\n\n  render() {\n\n    window.addEventListener(\"load\", function() {\n      if (window.ethereum) {\n        // use MetaMask's provider\n        App.web3 = new Web3(window.ethereum);\n        window.ethereum.enable(); // get permission to access accounts\n    \n        // detect Metamask account change\n        window.ethereum.on('accountsChanged', function (accounts) {\n          console.log('accountsChanges',accounts);\n    \n        });\n    \n         // detect Network account change\n        window.ethereum.on('networkChanged', function(networkId){\n          console.log('networkChanged',networkId);\n        });\n\n      } else {\n        console.warn(\n          \"No web3 detected. Falling back to http://127.0.0.1:8545. You should remove this fallback when you deploy live\",\n        );\n        // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n        App.web3 = new Web3(\n          new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\"),\n        );\n      }\n    });\n\n    const web3 = window.web3;\n\n    let button;\n    if (!this.state.connected) {\n      button = <Button style={{ position: \"absolute\", top: \"60px\", right: \"20px\" }} onClick={this.connectWallet} color=\"orange\">\n          <Image style={{ \"padding-top\": \"7px\" }} floated=\"left\" size=\"mini\" src={metamask} />\n          <p>Connect to MetaMask</p>\n        </Button>\n    } else {\n      button = <p style={{ position: \"absolute\", top: \"110px\", right: \"20px\", color: \"#C0C0C0\" }}><b>Account:</b> {this.state.account}</p>\n    }\n\n      \n      let mainnet;\n      mainnet = \n      <div>\n      <Grid divided='vertically'>\n        <Grid.Row columns={2} style={{ margin: \"20px\" }}>\n          <Grid.Column>\n\n            <Card.Group>\n              <Card style={{ width: \"900px\" }}>\n                <Card.Content style={{ background: \"#406ccd\" }}>\n                  <Card.Header style={{ color: \"white\" }}>\n                  <p style={{ color: \"#C0C0C0\", \"font-weight\": \"bold\", \"text-align\": \"right\" }}>APY: XX%</p>\n                    Top 5 Blue Chip DeFi Tokens\n                    </Card.Header>\n                  <Card.Description>\n\n                    <Form onSubmit={this.investDeFiMainnet}>\n                      <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"BNB amount to create\" name=\"defiToMintMainnet\" onChange={this.handleInputChange}></Input>\n                      <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\", width: \"150px\" }}>Create</Button>\n                    </Form>\n\n                    <Form onSubmit={this.withdrawDeFiMainnet}>\n                      <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"TOP15 amount to redeem\" name=\"withdrawValueDefi\" onChange={this.handleInputChange}></Input>\n                      <Button color=\"green\" style={{ margin: \"20px\", width: \"150px\" }}>Redeem</Button>\n                    </Form>\n\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n            </Card.Group>\n          </Grid.Column>\n\n          <Grid.Column>\n\n            <Card.Group>\n              <Card style={{ width: \"900px\" }}>\n                <Card.Content style={{ background: \"#406ccd\" }}>\n                  <Card.Header style={{ color: \"white\" }}>\n                  <p style={{ color: \"#C0C0C0\", \"font-weight\": \"bold\", \"text-align\": \"right\" }}>APY: XX%</p>\n                    Top 3 NFT / Metaverse Tokens\n                    </Card.Header>\n                  <Card.Description>\n\n                    <Form onSubmit={this.investNFTMainnet}>\n                      <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"BNB amount to create\" name=\"nftToMintMainnet\" onChange={this.handleInputChange}></Input>\n                      <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\", width: \"150px\" }}>Create</Button>\n                    </Form>\n\n                    <Form onSubmit={this.withdrawNFTMainnet}>\n                      <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"TOP15 amount to redeem\" name=\"withdrawValueNFT\" onChange={this.handleInputChange}></Input>\n                      <Button color=\"green\" style={{ margin: \"20px\", width: \"150px\" }}>Redeem</Button>\n                    </Form>\n\n                  </Card.Description>\n                </Card.Content>\n              </Card>\n            </Card.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      </div>\n\n    return (\n      <div className=\"App\">\n        <div>\n        <Message negative>\n          <Message.Header>The project is in the alpha stage, proceed at your own risk.</Message.Header>\n        </Message>\n      </div>\n        <br></br>\n\n        <Image src={velvet} size=\"medium\" verticalAlign='middle'></Image>\n\n        {button}\n        \n        {mainnet}\n\n        <Button onClick={this.approveNFTTokens} color=\"green\" style={{ margin: \"20px\", width: \"150px\" }}>approve nft</Button>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}